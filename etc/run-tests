#! /usr/bin/env node
'use strict';

const fs = require('fs');
const os = require('os');
const path = require('path');
const printf = require('fast-printf').printf;
const { spawnSync } = require("child_process");
const colors = require('colors'); // unsafe, modifies String prototype
const { wasm_fprintf } = require('./wasm-printf');

const def_arr = ["WAT file exists (created byƒ gradlew :test) and has been modified after C file",
    "WAT file compiled to WASM file",
    "Extracted expected output from C file",
    "WASM file generated expected output",
    "C file compiled to an executable",
    "Native executable compiled from C source generated expected output"];

const c_prefix = `void * malloc();
void * memset();
void * memcpy();
void * free(void *);
#define alloc(ignore, count, type)  (type *)malloc((count) * (sizeof(type)))
static int __memory_size = 1;
#define memgrow(size) __memory_size += (size)
#define memsize() __memory_size
`;

const compile = path.resolve(__dirname, '..', "build", "install", "c4wa-compile", "bin", "c4wa-compile");

async function main () {
    const arg = process.argv[2]; // 0 = node, 1 = script
    if (arg === undefined)
        console.log(`Usage: ${process.argv[1]} <all|FILE>`);
    else if (arg === 'all')
        await run_all_tests();
    else if (fs.existsSync(arg) && arg.endsWith('.wasm'))
        await run_wasm_file(arg, {stdout: true});
    else if (fs.existsSync(arg) && arg.endsWith('.c'))
        await run_c_file(arg);
    else if (!arg.includes('.') && !arg.includes('/'))
        await run_one_test(arg, true);
    else
        console.error("Invalid argument", arg, "must be an existing WASM file or word 'all'");
}

async function run_all_tests() {
    const wasm_dir = path.resolve(__dirname, '..', 'tests', 'wasm');
    const c_dir = path.resolve(__dirname, '..', 'tests', 'c');

    fs.mkdirSync(wasm_dir, {recursive: true}); // option 'recursive' prevents error when directory exists

    const files = fs.readdirSync(c_dir).filter(x => x.endsWith('.c')).map(x => x.substr(0,x.length-2));

    console.log("\nNumber of tests:", files.length);

    console.log("\n⦿ Legend of stages used".cyan);

    def_arr.forEach((msg, idx) => console.log(idx + 1, msg));
    console.log("\n" + def_arr.map((_, idx) => ` ${1 + idx} `).join(''));

    for (const test of files) {
        const results = await run_one_test(test, false);
        console.log(results.map(x => (x === 3)?'⚠️  '.green:((x === 2)? '✅ ' : ((x === 1)? '❌ ' : ' ∅ '.grey))).join(''), test);
    }
}

async function run_one_test(test, verbose) {
    const wat_dir = path.resolve(__dirname, '..', 'tests', 'wat');
    const wasm_dir = path.resolve(__dirname, '..', 'tests', 'wasm');
    const c_dir = path.resolve(__dirname, '..', 'tests', 'c');

    const results = new Array(def_arr.length).fill(0);

    // Test 1: WAT file exists
    let tid = 0;
    if (verbose)
        console.log(("\n⦿ " + (tid + 1) + ". " + def_arr[tid]).cyan);

    const cfile = path.resolve(c_dir, test + ".c");
    const wat = path.resolve(wat_dir, test + ".wat");
    results[tid] = fs.existsSync(wat) ? 2 : 1;
    if (!fs.existsSync(wat)) {
        results[tid] = 1;
        if (verbose)
            console.log("File", wat, "doesn't exist");
    }
    else {
        const mc = fs.statSync(cfile).mtime;
        const mwat = fs.statSync(wat).mtime;

        if (mwat < mc) {
            if (verbose)
                process.stdout.write(mc + " " + cfile + "\n" + mwat + " " + wat + "\n");
            results[tid] = 1;
        }
        else
            results[tid] = 2;
    }
    if (verbose)
        console.log("\n" + ((results[tid] === 2) ? "OK".bold.green : "FAILED".bold.red));

    // Test 2: Compile WAT to WASM
    tid ++;
    if (verbose)
        console.log(("\n⦿ " + (tid + 1) + ". " + def_arr[tid]).cyan);

    const wasm = path.resolve(wasm_dir, test + ".wasm");
    const spawn_options = {}
    if (verbose)
        spawn_options.stdio = 'inherit';

    if (results[0] === 2) {
        const res = spawnSync('wat2wasm', [wat, '--enable-bulk-memory', '-o', wasm], spawn_options);

        results[tid] = (res.status === 0) ? 2 : 1;
        if (verbose)
            console.log("\n" + ((results[tid] === 2) ? "OK".bold.green : "FAILED".bold.red));
    }
    else if (verbose)
        console.log("Skipping...")

    // Test 3: Extract expected output
    tid++;
    if (verbose)
        console.log(("\n⦿ " + (tid + 1) + ". " + def_arr[tid]).cyan);

    const lines = fs.readFileSync(cfile, 'utf8').split("\n");
    const expected_arr = [];
    for (let i = lines.length - 1; i >= 0; i--) {
        if (expected_arr.length === 0 && lines[i] === '')
            continue;
        if (lines[i].startsWith('// '))
            expected_arr.push(lines[i].substr(3) + "\n");
        else
            break;
    }
    const expected = expected_arr.reverse().join('');

    results[tid] = (expected_arr.length > 0) ? 2 : 1;
    if (verbose) {
        if (results[tid] !== 2)
            console.log(`Generate results by running ${process.argv[1]} ${wasm}`);

        console.log("\n" + ((results[tid] === 2) ? "OK".bold.green : "FAILED".bold.red));
    }

    // Test 4: running WASM file, checking output
    tid++;
    if (verbose)
        console.log(("\n⦿ " + (tid + 1) + ". " + def_arr[tid]).cyan);

    if (results[1] === 2 && results[2] === 2) {
        const output = await run_wasm_file(wasm, {stdout: false});

        results[tid] = (expected === output) ? 2 : 1;
        if (verbose)
            console.log("\n" + ((results[tid] === 2) ? "OK".bold.green : "FAILED".bold.red));
    }
    else if (verbose)
        console.log("Skipping...")

    // Test 5: C file compiled to an executable
    tid++;
    if (verbose)
        console.log(("\n⦿ " + (tid + 1) + ". " + def_arr[tid]).cyan);

    const tmp_dir = path.resolve(os.homedir(), 'temp');
    fs.mkdirSync(tmp_dir, {recursive: true});
    const tmp_exe = path.resolve(tmp_dir, 'tmp_exe');
    fs.rmSync(tmp_exe, {force: true});
    const tmp_c = path.resolve(tmp_dir, 'tmp.c');
    fs.writeFileSync(tmp_c,c_prefix + fs.readFileSync(cfile, 'utf8'));

    const res = spawnSync('gcc', ['-Wno-incompatible-library-redeclaration', '-o', tmp_exe, tmp_c], spawn_options);
    if (verbose)
        results[tid] = (res.status === 0) ? 2 : 1;
    else
        results[tid] = (res.status === 0) ? ((res.stderr.toString() === '') ? 2 : 3) : 1;
    if (verbose)
        console.log("\n" + ((results[tid] === 2) ? "OK".bold.green : "FAILED".bold.red));

    // Test 6: Executable generated expected output
    tid++;
    if (verbose)
        console.log(("\n⦿ " + (tid + 1) + ". " + def_arr[tid]).cyan);

    if ((results[4] === 2 || results[4] === 3) && results[2] === 2) {
        const res = spawnSync(tmp_exe);
        const output = (res.stdout === null)? '' : res.stdout.toString();
        results[tid] = (res.status === 0 && output === expected) ? 2 : 1;

        if (verbose) {
            if (output !== expected) {
                process.stdout.write("----------------  Expected ----------------\n");
                process.stdout.write(expected);
                process.stdout.write("-----------------  Actual -----------------\n");
                process.stdout.write(output);
                process.stdout.write("-----------------  The End ----------------\n");

                let i;
                for (i = 0; i < expected.length && i < output.length; i++)
                    if (expected[i] !== output[i]) {
                        console.log("Char #", i + 1, "differ: expected code", expected.charCodeAt(i), ", actual", output.charCodeAt(i));
                        break;
                    }

                if (i === expected.length)
                    console.log("Expected output ended after", i, "chars, actual output has", output.length, "chars, next char", output.charCodeAt(i));
                else if (i === output.length)
                    console.log("Actual output ended after", i, "chars, expected output has", expected.length, "chars, next char", expected.charCodeAt(i));
            }
            if (res.status !== 0)
                console.log("Process returned status", res.status);
        }
        if (verbose)
            console.log("\n" + ((results[tid] === 2) ? "OK".bold.green : "FAILED".bold.red));
    }
    else if (verbose)
        console.log("Skipping...");

    fs.rmSync(tmp_exe, {force: true});

    return results;
}

async function build() {
    const gradlew = path.resolve(__dirname, '..', 'gradlew');

    const res = spawnSync(gradlew, ['-q', 'installDist'], {stdio: 'inherit'});

    if (res.status !== 0) {
        console.error("❌ Build failed");
        process.exit(1);
    }

    console.log('✅ Build completed');
}

async function run_c_file(cfile) {
    const tmp_dir = path.resolve(os.homedir(), 'temp');
    fs.mkdirSync(tmp_dir, {recursive: true});
    const tmp_exe = path.resolve(tmp_dir, 'tmp_exe');
    fs.rmSync(tmp_exe, {force: true});
    const wat = path.resolve(tmp_dir, path.basename(cfile).replace('.c', '.wat'));
    const wasm = path.resolve(tmp_dir, path.basename(cfile).replace('.c', '.wasm'));
    const tmp_c = path.resolve(tmp_dir, 'tmp.c');
    fs.writeFileSync(tmp_c, c_prefix + fs.readFileSync(cfile, 'utf8'));

    await build ();

    let res = spawnSync('gcc', ['-Wno-incompatible-library-redeclaration', '-o', tmp_exe, tmp_c], {stdio: 'inherit'});

    if (res.status !== 0) {
        console.error("❌ GCC compilation failed, not proceeding");
        process.exit(1);
    }

    console.log('✅ Compiled into native executable');

    res = spawnSync(tmp_exe);

    if (res.status !== 0) {
        console.error("❌ Native execution failed, status", res.status, "executing", tmp_exe, ", not proceeding");
        process.exit(1);
    }
    const c_output = (res.stdout === null) ? '' : res.stdout.toString();
    console.log('✅ Saved output (', c_output.length, "bytes)");

    fs.rmSync(tmp_exe, {force: true});

    res = spawnSync(compile, ['-P', cfile, '-o', wat], {stdio: 'inherit'});

    if (res.status !== 0) {
        console.error("❌ c4wa compilation failed, not proceeding");
        process.stdout.write("\n----------------  C output ----------------\n");
        process.stdout.write(c_output);
        process.stdout.write("-----------------  The End ----------------\n");

        process.exit(1);
    }
    console.log('✅ Transpiled into WAT file');

    res = spawnSync('wat2wasm', [wat, '--enable-bulk-memory', '-o', wasm], {stdio: 'inherit'});

    if (res.status !== 0) {
        console.error("❌ wat2wasm compilation", wat, "to", wasm, "failed with status", res.status, ";", "not proceeding");
        process.exit(1);
    }

    console.log('✅ Compiled WAT into WASM file');

    const wasm_output = await run_wasm_file(wasm, {stdout: false});

    console.log('✅ Executed WASM files');

    if (wasm_output === c_output) {
        process.stdout.write("✅ Output identical\n-------------------------------------\n" +
            wasm_output + "-------------------------------------\n");
    }
    else {
        process.stdout.write("----------------  C output ----------------\n");
        process.stdout.write(c_output);
        process.stdout.write("-----------------  WASM output -----------------\n");
        process.stdout.write(wasm_output);
        process.stdout.write("-----------------  The End ----------------\n");

        console.error("❌ Output different");
    }

}

async function run_wasm_file(fname, options) {
    const target = options.stdout? process.stdout: [];

    const wasm_bytes = new Uint8Array(fs.readFileSync(fname));

    let wasm_mem;

    const wasm_instance = (await WebAssembly.instantiate(wasm_bytes, {c4wa: {printf: wasm_fprintf(() => new Uint8Array(wasm_mem.buffer), target)}})).instance;

    wasm_mem = wasm_instance.exports.memory;
    wasm_instance.exports.main ();

    if (!options.stdout)
        return target.join('');
}

main();
