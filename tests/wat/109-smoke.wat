(module
  (import "c4wa" "printf" (func $printf (param i32) (param i32)))
  (global $@stack (mut i32) (i32.const 0))
  (memory (export "memory") 1)
  (data (i32.const 1024) "called foo(%d); \00\E2\9E\BE %d && %d = %d\0A\00\E2\9E\BE %d || %d = %d\0A\00\E2\9E\BE [64] %d && %d = %d\0A\00\E2\9E\BE [64] %d || %d = %d\0A\00\E2\9E\BE %d && %d && %d = %d\0A\00\E2\9E\BE %d || %d || %d = %d\0A\00\E2\9E\BE [64] %d && %d && %d = %d\0A\00\E2\9E\BE [64] %d || %d || %d = %d\0A\00=> Double argument testing\0A\00=> Triple argument testing\0A\00")
  (func $foo32 (param $ret i32) (result i32)
    (local $@stack_entry i32)
    (set_local $@stack_entry (global.get $@stack))
    (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $ret)))
    (call $printf (i32.const 1024) (global.get $@stack))
    (global.set $@stack (get_local $@stack_entry))
    (get_local $ret))
  (func $foo64 (param $ret i64) (result i64)
    (local $@stack_entry i32)
    (set_local $@stack_entry (global.get $@stack))
    (i64.store (global.get $@stack) (get_local $ret))
    (call $printf (i32.const 1024) (global.get $@stack))
    (global.set $@stack (get_local $@stack_entry))
    (get_local $ret))
  (func $test2_int (param $a i32) (param $b i32)
    (local $@stack_entry i32)
    (local $res i32)
    (set_local $@stack_entry (global.get $@stack))
    (set_local $res (if (result i32) (i32.eqz (call $foo32 (get_local $a))) (then (i32.const 0)) (else (i32.ne (call $foo32 (get_local $b)) (i32.const 0)))))
    (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $a)))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $b)))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $res)))
    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 16)))
    (call $printf (i32.const 1041) (global.get $@stack))
    (set_local $res (if (result i32) (call $foo32 (get_local $a)) (then (i32.const 1)) (else (i32.ne (call $foo32 (get_local $b)) (i32.const 0)))))
    (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $a)))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $b)))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $res)))
    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 16)))
    (call $printf (i32.const 1060) (global.get $@stack))
    (global.set $@stack (get_local $@stack_entry)))
  (func $test2_long (param $a i64) (param $b i64)
    (local $@stack_entry i32)
    (local $res i32)
    (set_local $@stack_entry (global.get $@stack))
    (set_local $res (if (result i32) (i64.eqz (call $foo64 (get_local $a))) (then (i32.const 0)) (else (i64.ne (call $foo64 (get_local $b)) (i64.const 0)))))
    (i64.store (global.get $@stack) (get_local $a))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store (global.get $@stack) (get_local $b))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $res)))
    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 16)))
    (call $printf (i32.const 1079) (global.get $@stack))
    (set_local $res (if (result i32) (i32.wrap_i64 (call $foo64 (get_local $a))) (then (i32.const 1)) (else (i64.ne (call $foo64 (get_local $b)) (i64.const 0)))))
    (i64.store (global.get $@stack) (get_local $a))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store (global.get $@stack) (get_local $b))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $res)))
    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 16)))
    (call $printf (i32.const 1103) (global.get $@stack))
    (global.set $@stack (get_local $@stack_entry)))
  (func $test2 (param $a i32) (param $b i32)
    (call $test2_int (get_local $a) (get_local $b))
    (call $test2_long (i64.extend_i32_s (get_local $a)) (i64.extend_i32_s (get_local $b))))
  (func $test3 (param $a i32) (param $b i32) (param $c i32)
    (call $test3_int (get_local $a) (get_local $b) (get_local $c))
    (call $test3_long (i64.extend_i32_s (get_local $a)) (i64.extend_i32_s (get_local $b)) (i64.extend_i32_s (get_local $c))))
  (func $test3_int (param $a i32) (param $b i32) (param $c i32)
    (local $@stack_entry i32)
    (local $res i32)
    (set_local $@stack_entry (global.get $@stack))
    (set_local $res (block $@block_1_break (result i32) (drop (br_if $@block_1_break (i32.const 0) (i32.eqz (call $foo32 (get_local $a))))) (drop (br_if $@block_1_break (i32.const 0) (i32.eqz (call $foo32 (get_local $b))))) (drop (br_if $@block_1_break (i32.const 0) (i32.eqz (call $foo32 (get_local $c))))) (i32.const 1)))
    (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $a)))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $b)))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $c)))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $res)))
    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 24)))
    (call $printf (i32.const 1127) (global.get $@stack))
    (set_local $res (block $@block_2_break (result i32) (drop (br_if $@block_2_break (i32.const 1) (call $foo32 (get_local $a)))) (drop (br_if $@block_2_break (i32.const 1) (call $foo32 (get_local $b)))) (drop (br_if $@block_2_break (i32.const 1) (call $foo32 (get_local $c)))) (i32.const 0)))
    (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $a)))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $b)))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $c)))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $res)))
    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 24)))
    (call $printf (i32.const 1152) (global.get $@stack))
    (global.set $@stack (get_local $@stack_entry)))
  (func $test3_long (param $a i64) (param $b i64) (param $c i64)
    (local $@stack_entry i32)
    (local $res i32)
    (set_local $@stack_entry (global.get $@stack))
    (set_local $res (block $@block_1_break (result i32) (drop (br_if $@block_1_break (i32.const 0) (i64.eqz (call $foo64 (get_local $a))))) (drop (br_if $@block_1_break (i32.const 0) (i64.eqz (call $foo64 (get_local $b))))) (drop (br_if $@block_1_break (i32.const 0) (i64.eqz (call $foo64 (get_local $c))))) (i32.const 1)))
    (i64.store (global.get $@stack) (get_local $a))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store (global.get $@stack) (get_local $b))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store (global.get $@stack) (get_local $c))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $res)))
    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 24)))
    (call $printf (i32.const 1177) (global.get $@stack))
    (set_local $res (block $@block_2_break (result i32) (drop (br_if $@block_2_break (i32.const 1) (i32.wrap_i64 (call $foo64 (get_local $a))))) (drop (br_if $@block_2_break (i32.const 1) (i32.wrap_i64 (call $foo64 (get_local $b))))) (drop (br_if $@block_2_break (i32.const 1) (i32.wrap_i64 (call $foo64 (get_local $c))))) (i32.const 0)))
    (i64.store (global.get $@stack) (get_local $a))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store (global.get $@stack) (get_local $b))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store (global.get $@stack) (get_local $c))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $res)))
    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 24)))
    (call $printf (i32.const 1207) (global.get $@stack))
    (global.set $@stack (get_local $@stack_entry)))
  (func $main (export "main") (result i32)
    (local $@stack_entry i32)
    (local $a i32)
    (local $b i32)
    (local $c i32)
    (set_local $@stack_entry (global.get $@stack))
    (call $printf (i32.const 1237) (global.get $@stack))
    (set_local $a (i32.const 10))
    (set_local $b (i32.const 20))
    (call $test2 (get_local $a) (get_local $b))
    (set_local $a (i32.const 0))
    (set_local $b (i32.const -2))
    (call $test2 (get_local $a) (get_local $b))
    (set_local $a (i32.const -5))
    (set_local $b (i32.const 0))
    (call $test2 (get_local $a) (get_local $b))
    (set_local $a (i32.const 0))
    (set_local $b (i32.const 0))
    (call $test2 (get_local $a) (get_local $b))
    (call $printf (i32.const 1265) (global.get $@stack))
    (set_local $a (i32.const 0))
    (set_local $b (i32.const 0))
    (set_local $c (i32.const 11))
    (call $test3 (get_local $a) (get_local $b) (get_local $c))
    (set_local $a (i32.const 0))
    (set_local $b (i32.const -13))
    (set_local $c (i32.const 0))
    (call $test3 (get_local $a) (get_local $b) (get_local $c))
    (set_local $a (i32.const 19))
    (set_local $b (i32.const 0))
    (set_local $c (i32.const 0))
    (call $test3 (get_local $a) (get_local $b) (get_local $c))
    (set_local $a (i32.const 2))
    (set_local $b (i32.const -1))
    (set_local $c (i32.const 0))
    (call $test3 (get_local $a) (get_local $b) (get_local $c))
    (set_local $a (i32.const -4))
    (set_local $b (i32.const 0))
    (set_local $c (i32.const 8))
    (call $test3 (get_local $a) (get_local $b) (get_local $c))
    (set_local $a (i32.const 0))
    (set_local $b (i32.const 13))
    (set_local $c (i32.const 7))
    (call $test3 (get_local $a) (get_local $b) (get_local $c))
    (set_local $a (i32.const 1))
    (set_local $b (i32.const -9))
    (set_local $c (i32.const 11))
    (call $test3 (get_local $a) (get_local $b) (get_local $c))
    (set_local $a (i32.const 0))
    (set_local $b (i32.const 0))
    (set_local $c (i32.const 0))
    (call $test3 (get_local $a) (get_local $b) (get_local $c))
    (global.set $@stack (get_local $@stack_entry))
    (i32.const 0)))
