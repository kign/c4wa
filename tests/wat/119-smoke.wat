(module
  (import "c4wa" "printf" (func $printf (param i32) (param i32)))
  (global $seed (mut i32) (i32.const 57))
  (global $@stack (mut i32) (i32.const 0))
  (memory (export "memory") 1)
  (data (i32.const 1024) "%s%.6f\00\00\0A\00, \00min(%d) * \E2\88\9A%d = %.6f\0A\00")
  (func $mulberry32 (result f64)
    (local $t i32)
    (global.set $seed (i32.add (global.get $seed) (i32.const 1831565813)))
    (set_local $t (global.get $seed))
    (set_local $t (i32.mul (i32.xor (get_local $t) (i32.shr_u (get_local $t) (i32.const 15))) (i32.or (get_local $t) (i32.const 1))))
    (set_local $t (i32.xor (get_local $t) (i32.add (get_local $t) (i32.mul (i32.xor (get_local $t) (i32.shr_u (get_local $t) (i32.const 7))) (i32.or (get_local $t) (i32.const 61))))))
    (f64.div (f64.convert_i32_u (i32.xor (get_local $t) (i32.shr_u (get_local $t) (i32.const 14)))) (f64.const 4.294967296E9)))
  (func $array_min_ (param $arr i32) (param $a i32) (param $b i32) (result f64)
    (local $c i32)
    (if (i32.eq (get_local $b) (get_local $a))
      (then
        (return (f64.load (i32.add (get_local $arr) (i32.mul (get_local $a) (i32.const 8))))))
      (else
        (if (i32.eq (get_local $b) (i32.add (get_local $a) (i32.const 1)))
          (then
            (return (f64.min (f64.load (i32.add (get_local $arr) (i32.mul (get_local $a) (i32.const 8)))) (f64.load (i32.add (get_local $arr) (i32.mul (get_local $b) (i32.const 8)))))))
          (else
            (set_local $c (i32.div_s (i32.add (get_local $a) (get_local $b)) (i32.const 2)))
            (return (f64.min (call $array_min_ (get_local $arr) (get_local $a) (get_local $c)) (call $array_min_ (get_local $arr) (i32.add (get_local $c) (i32.const 1)) (get_local $b))))))))
    (unreachable))
  (func $array_min (param $arr i32) (param $N i32) (result f64)
    (call $array_min_ (get_local $arr) (i32.const 0) (i32.sub (get_local $N) (i32.const 1))))
  (func $make_array (param $N i32) (result i32)
    (local $arr i32)
    (local $i i32)
    (set_local $arr (i32.const 2048))
    (block $@block_1_break
      (loop $@block_1_continue
        (br_if $@block_1_break (i32.ge_s (get_local $i) (get_local $N)))
        (f64.store (i32.add (get_local $arr) (i32.mul (get_local $i) (i32.const 8))) (call $mulberry32))
        (set_local $i (i32.add (get_local $i) (i32.const 1)))
        (br $@block_1_continue)))
    (get_local $arr))
  (func $main (export "main") (result i32)
    (local $@stack_entry i32)
    (local $i i32)
    (local $arr i32)
    (set_local $@stack_entry (global.get $@stack))
    (block $@block_1_break
      (set_local $i (i32.const 0))
      (loop $@block_1_continue
        (br_if $@block_1_break (i32.ge_s (get_local $i) (i32.const 100)))
        (i64.store (global.get $@stack) (i64.const 1024))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (select (i32.const 1031) (select (i32.const 1032) (i32.const 1034) (i32.eqz (i32.rem_s (get_local $i) (i32.const 10)))) (i32.eqz (get_local $i)))))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (f64.store (global.get $@stack) (call $mulberry32))
        (global.set $@stack (i32.sub (global.get $@stack) (i32.const 16)))
        (call $printf (global.get $@stack) (i32.const 3))
        (set_local $i (i32.add (get_local $i) (i32.const 1)))
        (br $@block_1_continue)))
    (i64.store (global.get $@stack) (i64.const 1032))
    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 0)))
    (call $printf (global.get $@stack) (i32.const 1))
    (drop (memory.grow (i32.const 2)))
    (set_local $arr (call $make_array (i32.const 10000)))
    (block $@block_2_break
      (set_local $i (i32.const 1000))
      (loop $@block_2_continue
        (br_if $@block_2_break (i32.gt_s (get_local $i) (i32.const 10000)))
        (i64.store (global.get $@stack) (i64.const 1037))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $i)))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $i)))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (f64.store (global.get $@stack) (f64.mul (f64.sqrt (f64.convert_i32_s (get_local $i))) (call $array_min (get_local $arr) (get_local $i))))
        (global.set $@stack (i32.sub (global.get $@stack) (i32.const 24)))
        (call $printf (global.get $@stack) (i32.const 4))
        (set_local $i (i32.add (get_local $i) (i32.const 1000)))
        (br $@block_2_continue)))
    (global.set $@stack (get_local $@stack_entry))
    (i32.const 0)))
