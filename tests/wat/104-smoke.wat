(module
  (import "c4wa" "printf" (func $printf (param i32) (param i32)))
  (global $precision f64 (f64.const 1.0E-9))
  (memory (export "memory") 1)
  (data (i32.const 1024) "\E2\88\9A%d = %.8f\5Cn\00")
  (func $sqrt (param $x f64) (result f64)
    (local $a f64)
    (local $b f64)
    (local $c f64)
    (set_local $a (f64.const 0.0))
    (set_local $b (get_local $x))
    (loop $@block_1_continue
      (set_local $c (f64.div (f64.add (get_local $a) (get_local $b)) (f64.const 2.0)))
      (if (f64.gt (f64.mul (get_local $c) (get_local $c)) (get_local $x))
        (then
          (set_local $b (get_local $c)))
        (else
          (set_local $a (get_local $c))))
      (br_if $@block_1_continue (f64.gt (f64.sub (get_local $b) (get_local $a)) (global.get $precision))))
    (return (f64.div (f64.add (get_local $a) (get_local $b)) (f64.const 2.0))))
  (func $main (export "main") (result i32)
    (local $i i32)
    (set_local $i (i32.const 2))
    (loop $@block_1_continue
      (i64.store (i32.const 0) (i64.extend_i32_s (i32.const 1024)))
      (i64.store (i32.const 8) (i64.extend_i32_s (get_local $i)))
      (f64.store (i32.const 16) (call $sqrt (f64.convert_i32_s (get_local $i))))
      (call $printf (i32.const 0) (i32.const 3))
      (set_local $i (i32.add (get_local $i) (i32.const 1)))
      (br_if $@block_1_continue (i32.le_s (get_local $i) (i32.const 10))))
    (return (i32.const 0))))
