(module
  (import "c4wa" "printf" (func $printf (param i32) (param i32)))
  (global $@stack (mut i32) (i32.const 0))
  (global $N i32 (i32.const 20))
  (memory (export "memory") 1)
  (data (i32.const 1024) "factorial(%d)\0A\00%d! = %.0f\0A\00")
  (func $factorial (param $n i32) (result f64)
    (local $@stack_entry i32)
    (set_local $@stack_entry (global.get $@stack))
    (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $n)))
    (call $printf (i32.const 1024) (global.get $@stack))
    (if (i32.eq (get_local $n) (i32.const 1))
      (then
        (global.set $@stack (get_local $@stack_entry))
        (return (f64.const 1.0))))
    (global.set $@stack (get_local $@stack_entry))
    (f64.mul (f64.convert_i32_s (get_local $n)) (call $factorial (i32.sub (get_local $n) (i32.const 1)))))
  (func $main (export "main") (result i32)
    (local $@stack_entry i32)
    (set_local $@stack_entry (global.get $@stack))
    (i64.store (global.get $@stack) (i64.extend_i32_s (global.get $N)))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (f64.store (global.get $@stack) (call $factorial (global.get $N)))
    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 8)))
    (call $printf (i32.const 1039) (global.get $@stack))
    (global.set $@stack (get_local $@stack_entry))
    (i32.const 0)))
