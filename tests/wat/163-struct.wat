(module
  (import "c4wa" "printf" (func $printf (param i32) (param i32)))
  (global $__last_offset (mut i32) (i32.const 1075))
  (global $node_idx (mut i32) (i32.const 0))
  (global $__available_size (mut i32) (i32.const -1))
  (global $@stack (mut i32) (i32.const 0))
  (memory (export "memory") 1)
  (data (i32.const 1024) "ERROR: List is already empty\0A\00, \00%d\00<empty list>\00\0A\00")
  (func $new_node (result i32)
    (local $node i32)
    (set_local $node (call $malloc (i32.const 8)))
    (global.set $node_idx (i32.add (global.get $node_idx) (i32.const 1)))
    (i32.store (get_local $node) (i32.const 0))
    (get_local $node))
  (func $init_linked_list (param $list i32)
    (i32.store (get_local $list) (i32.const 0))
    (i32.store (i32.add (get_local $list) (i32.const 4)) (i32.const 0)))
  (func $pushTail (param $list i32) (param $val i32)
    (if (i32.eqz (i32.load (get_local $list)))
      (then
        (i32.store (get_local $list) (call $new_node))
        (i32.store (i32.add (get_local $list) (i32.const 4)) (i32.load (get_local $list))))
      (else
        (i32.store (i32.load (i32.add (get_local $list) (i32.const 4))) (call $new_node))
        (i32.store (i32.add (get_local $list) (i32.const 4)) (i32.load (i32.load (i32.add (get_local $list) (i32.const 4)))))))
    (i32.store (i32.add (i32.load (i32.add (get_local $list) (i32.const 4))) (i32.const 4)) (get_local $val)))
  (func $pushHead (param $list i32) (param $val i32)
    (local $head i32)
    (if (i32.eqz (i32.load (get_local $list)))
      (then
        (i32.store (get_local $list) (call $new_node))
        (i32.store (i32.add (get_local $list) (i32.const 4)) (i32.load (get_local $list))))
      (else
        (set_local $head (call $new_node))
        (i32.store (get_local $head) (i32.load (get_local $list)))
        (i32.store (get_local $list) (get_local $head))))
    (i32.store (i32.add (i32.load (get_local $list)) (i32.const 4)) (get_local $val)))
  (func $popTail (param $list i32) (result i32)
    (local $@stack_entry i32)
    (local $res i32)
    (local $v i32)
    (set_local $@stack_entry (global.get $@stack))
    (set_local $res (select (i32.load (i32.add (i32.load (i32.add (get_local $list) (i32.const 4))) (i32.const 4))) (i32.const 0) (i32.load (i32.add (get_local $list) (i32.const 4)))))
    (if (if (result i32) (i32.eqz (i32.load (i32.add (get_local $list) (i32.const 4)))) (then (i32.const 0)) (else (i32.ne (i32.eq (i32.load (i32.add (get_local $list) (i32.const 4))) (i32.load (get_local $list))) (i32.const 0))))
      (then
        (i32.store (get_local $list) (i32.const 0))
        (i32.store (i32.add (get_local $list) (i32.const 4)) (i32.const 0)))
      (else
        (if (i32.load (i32.add (get_local $list) (i32.const 4)))
          (then
            (block $@block_1_break
              (set_local $v (i32.load (get_local $list)))
              (loop $@block_1_continue
                (br_if $@block_1_break (i32.eq (i32.load (get_local $v)) (i32.load (i32.add (get_local $list) (i32.const 4)))))
                (set_local $v (i32.load (get_local $v)))
                (br $@block_1_continue)))
            (i32.store (get_local $v) (i32.const 0))
            (i32.store (i32.add (get_local $list) (i32.const 4)) (get_local $v)))
          (else
            (i64.store (global.get $@stack) (i64.const 1024))
            (global.set $@stack (i32.sub (global.get $@stack) (i32.const 0)))
            (call $printf (global.get $@stack) (i32.const 1))))))
    (global.set $@stack (get_local $@stack_entry))
    (get_local $res))
  (func $print_list (param $list i32)
    (local $@stack_entry i32)
    (local $i i32)
    (local $v i32)
    (set_local $@stack_entry (global.get $@stack))
    (block $@block_1_break
      (set_local $v (i32.load (get_local $list)))
      (loop $@block_1_continue
        (br_if $@block_1_break (i32.eqz (get_local $v)))
        (if (i32.gt_s (get_local $i) (i32.const 0))
          (then
            (i64.store (global.get $@stack) (i64.const 1054))
            (global.set $@stack (i32.sub (global.get $@stack) (i32.const 0)))
            (call $printf (global.get $@stack) (i32.const 1))))
        (i64.store (global.get $@stack) (i64.const 1057))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (i32.load (i32.add (get_local $v) (i32.const 4)))))
        (global.set $@stack (i32.sub (global.get $@stack) (i32.const 8)))
        (call $printf (global.get $@stack) (i32.const 2))
        (set_local $i (i32.add (get_local $i) (i32.const 1)))
        (set_local $v (i32.load (get_local $v)))
        (br $@block_1_continue)))
    (if (i32.eqz (get_local $i))
      (then
        (i64.store (global.get $@stack) (i64.const 1060))
        (global.set $@stack (i32.sub (global.get $@stack) (i32.const 0)))
        (call $printf (global.get $@stack) (i32.const 1))))
    (i64.store (global.get $@stack) (i64.const 1073))
    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 0)))
    (call $printf (global.get $@stack) (i32.const 1))
    (global.set $@stack (get_local $@stack_entry)))
  (func $main (export "main") (result i32)
    (local $@stack_entry i32)
    (local $i i32)
    (local $linkedList i32)
    (set_local $@stack_entry (global.get $@stack))
    (set_local $linkedList (global.get $@stack))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (call $init_linked_list (get_local $linkedList))
    (call $print_list (get_local $linkedList))
    (call $pushTail (get_local $linkedList) (i32.const 57))
    (call $print_list (get_local $linkedList))
    (call $pushTail (get_local $linkedList) (i32.const -19))
    (call $print_list (get_local $linkedList))
    (drop (call $popTail (get_local $linkedList)))
    (call $print_list (get_local $linkedList))
    (drop (call $popTail (get_local $linkedList)))
    (call $print_list (get_local $linkedList))
    (drop (call $popTail (get_local $linkedList)))
    (call $print_list (get_local $linkedList))
    (block $@block_1_break
      (set_local $i (i32.const 1))
      (loop $@block_1_continue
        (br_if $@block_1_break (i32.gt_s (get_local $i) (i32.const 20)))
        (call $pushTail (get_local $linkedList) (get_local $i))
        (set_local $i (i32.add (get_local $i) (i32.const 1)))
        (br $@block_1_continue)))
    (call $print_list (get_local $linkedList))
    (call $init_linked_list (get_local $linkedList))
    (block $@block_2_break
      (set_local $i (i32.const 1))
      (loop $@block_2_continue
        (br_if $@block_2_break (i32.gt_s (get_local $i) (i32.const 20)))
        (call $pushHead (get_local $linkedList) (get_local $i))
        (set_local $i (i32.add (get_local $i) (i32.const 1)))
        (br $@block_2_continue)))
    (call $print_list (get_local $linkedList))
    (global.set $@stack (get_local $@stack_entry))
    (i32.const 0))
  (func $malloc (param $size i32) (result i32)
    (local $res i32)
    (local $pages i32)
    (if (i32.lt_s (global.get $__available_size) (i32.const 0))
      (then
        (global.set $__available_size (i32.mul (i32.const 64000) (memory.size)))))
    (set_local $res (global.get $__last_offset))
    (global.set $__last_offset (i32.add (global.get $__last_offset) (get_local $size)))
    (if (i32.gt_s (global.get $__last_offset) (global.get $__available_size))
      (then
        (set_local $pages (i32.add (i32.const 1) (i32.div_s (global.get $__last_offset) (i32.const 64000))))
        (drop (memory.grow (i32.sub (get_local $pages) (memory.size))))
        (global.set $__available_size (i32.mul (i32.const 64000) (get_local $pages)))))
    (get_local $res)))
