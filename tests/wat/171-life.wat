(module
  (import "c4wa" "printf" (func $printf (param i32) (param i32)))
  (global $mm_map (mut i32) (i32.const 0))
  (global $world (mut i32) (i32.const 0))
  (global $seed (mut i32) (i32.const 57))
  (global $mm_size (mut i32) (i32.const -1))
  (global $@stack (mut i32) (i32.const 0))
  (global $mm_start (mut i32) (i32.const 128))
  (global $mm_long (mut i32) (i32.const 16))
  (memory (export "memory") 1)
  (data (i32.const 1024) "Memory initialized: mm_long = %d, mm_start = %d\0A\00Out of MAP memory (CAP = %d)\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22mm_map[i] != 0\22 @ line %d\0A\00Allocating Box<%d>: %d = [%d, %d] | x = (%d,%d), y = (%d,%d)\0A\00Freeing Box: %d = [%d, %d]\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22g->level == w->level - 1\22 @ line %d\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22g->size == w->size/N\22 @ line %d\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22g->x0 == w->x0 + g->size * x\22 @ line %d\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22g->y0 == w->y0 + g->size * y\22 @ line %d\0A\00set_cell(%d, %d, %d)\0A\00Point %d, %d is outside the world %d, %d, %d, %d\0A\00xmin = %d, xmax = %d, ymin = %d, ymax = %d\0A\00Level: %d => %d, Size: %d => %d\0A\00Converged to original box @ %d, %d (size %d)\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22w->x0 + xp*wsize == world->x0\22 @ line %d\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22w->y0 + yp*wsize == world->y0\22 @ line %d\0A\00w->x0 = %d, xp = %d, wsize = %d, w->y0 = %d, yp = %d\0A\00Entering (%d,%d) into <%d,%d,%d,%d>\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22w->x0 <= x && x < w->x0 + w->size && w->y0 <= y && y < w->y0 + w->size\22 @ line %d\0A\00Assigned <%d,%d,%d>[%d] = %d\0A\00Going down to level %d, xp = %d, yp = %d\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22t1 == w->level\22 @ line %d\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22t2 == w->x0\22 @ line %d\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22t3 == w->y0\22 @ line %d\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22size == w->size\22 @ line %d\0A\00Done!\0A\00[<%d,%d,%d>\00 (%d,%d)\00]\00.\00\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22*k < n\22 @ line %d\0A\00Raw In    :\00\0ASorted In :\00\0ASorted Out:\00\0ARaw Out   :\00")
  (func $init_memory_manager
    (local $@stack_entry i32)
    (set_local $@stack_entry (global.get $@stack))
    (global.set $mm_map (i32.const 3072))
    (memory.fill (global.get $mm_map) (i32.const -1) (i32.mul (i32.const 8) (global.get $mm_long)))
    (global.set $mm_size (i32.const 120))
    (i64.store (global.get $@stack) (i64.const 1024))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store (global.get $@stack) (i64.extend_i32_s (global.get $mm_long)))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store (global.get $@stack) (i64.extend_i32_s (global.get $mm_start)))
    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 16)))
    (call $printf (global.get $@stack) (i32.const 3))
    (global.set $@stack (get_local $@stack_entry)))
  (func $new_box (param $level i32) (param $x0 i32) (param $y0 i32) (result i32)
    (local $@stack_entry i32)
    (local $verbose i32)
    (local $i i32)
    (local $j i32)
    (local $idx i32)
    (local $size i32)
    (local $k i32)
    (local $box i32)
    (set_local $@stack_entry (global.get $@stack))
    (block $@block_1_break
      (set_local $i (i32.const 0))
      (loop $@block_1_continue
        (br_if $@block_1_break (i32.eqz (if (result i32) (i32.ge_s (get_local $i) (global.get $mm_long)) (then (i32.const 0)) (else (i32.ne (i64.eqz (i64.load (i32.add (global.get $mm_map) (i32.mul (get_local $i) (i32.const 8))))) (i32.const 0))))))
        (set_local $i (i32.add (get_local $i) (i32.const 1)))
        (br $@block_1_continue)))
    (if (i32.eq (get_local $i) (global.get $mm_long))
      (then
        (i64.store (global.get $@stack) (i64.const 1073))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.const 1000))
        (global.set $@stack (i32.sub (global.get $@stack) (i32.const 8)))
        (call $printf (global.get $@stack) (i32.const 2))
        (unreachable)))
    (if (i64.eq (i64.load (i32.add (global.get $mm_map) (i32.mul (get_local $i) (i32.const 8)))) (i64.const 0))
      (then
        (i64.store (global.get $@stack) (i64.const 1103))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.const 66))
        (global.set $@stack (i32.sub (global.get $@stack) (i32.const 8)))
        (call $printf (global.get $@stack) (i32.const 2))
        (unreachable)))
    (set_local $j (i32.wrap_i64 (i64.ctz (i64.load (i32.add (global.get $mm_map) (i32.mul (get_local $i) (i32.const 8)))))))
    (set_local $idx (i32.add (i32.mul (i32.const 64) (get_local $i)) (get_local $j)))
    (set_local $size (i32.const 10))
    (block $@block_2_break
      (loop $@block_2_continue
        (br_if $@block_2_break (i32.ge_s (get_local $k) (get_local $level)))
        (set_local $size (i32.mul (get_local $size) (i32.const 5)))
        (set_local $k (i32.add (get_local $k) (i32.const 1)))
        (br $@block_2_continue)))
    (if (get_local $verbose)
      (then
        (i64.store (global.get $@stack) (i64.const 1149))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $level)))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $idx)))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $i)))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $j)))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $x0)))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (i32.sub (i32.add (get_local $x0) (get_local $size)) (i32.const 1))))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $y0)))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (i32.sub (i32.add (get_local $y0) (get_local $size)) (i32.const 1))))
        (global.set $@stack (i32.sub (global.get $@stack) (i32.const 64)))
        (call $printf (global.get $@stack) (i32.const 9))))
    (i64.store (i32.add (global.get $mm_map) (i32.mul (get_local $i) (i32.const 8))) (i64.xor (i64.load (i32.add (global.get $mm_map) (i32.mul (get_local $i) (i32.const 8)))) (i64.shl (i64.const 1) (i64.extend_i32_s (get_local $j)))))
    (set_local $box (i32.add (i32.add (global.get $mm_start) (i32.mul (get_local $idx) (global.get $mm_size))) (i32.const 3072)))
    (memory.fill (get_local $box) (i32.const 0) (global.get $mm_size))
    (i32.store (get_local $box) (get_local $level))
    (i32.store (i32.add (get_local $box) (i32.const 8)) (get_local $x0))
    (i32.store (i32.add (get_local $box) (i32.const 12)) (get_local $y0))
    (i32.store (i32.add (get_local $box) (i32.const 16)) (get_local $size))
    (global.set $@stack (get_local $@stack_entry))
    (get_local $box))
  (func $free_box (export "free_box") (param $box i32)
    (local $@stack_entry i32)
    (local $idx i32)
    (local $i i32)
    (local $j i32)
    (set_local $@stack_entry (global.get $@stack))
    (set_local $idx (i32.div_s (i32.sub (get_local $box) (i32.const 3072)) (global.get $mm_size)))
    (set_local $i (i32.div_s (get_local $idx) (i32.const 64)))
    (set_local $j (i32.rem_s (get_local $idx) (i32.const 64)))
    (i64.store (global.get $@stack) (i64.const 1211))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $idx)))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $i)))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $j)))
    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 24)))
    (call $printf (global.get $@stack) (i32.const 4))
    (i64.store (i32.add (global.get $mm_map) (i32.mul (get_local $i) (i32.const 8))) (i64.and (i64.load (i32.add (global.get $mm_map) (i32.mul (get_local $i) (i32.const 8)))) (i64.xor (i64.shl (i64.const 1) (i64.extend_i32_s (get_local $j))) (i64.const -1))))
    (global.set $@stack (get_local $@stack_entry)))
  (func $verify (param $w i32)
    (local $@stack_entry i32)
    (local $y i32)
    (local $x i32)
    (local $g i32)
    (set_local $@stack_entry (global.get $@stack))
    (if (i32.eqz (i32.load (get_local $w)))
      (then
        (global.set $@stack (get_local $@stack_entry))
        (return)))
    (block $@block_1_break
      (loop $@block_1_continue
        (br_if $@block_1_break (i32.ge_s (get_local $y) (i32.const 5)))
        (block $@block_1_1_break
          (set_local $x (i32.const 0))
          (loop $@block_1_1_continue
            (br_if $@block_1_1_break (i32.ge_s (get_local $x) (i32.const 5)))
            (set_local $g (i32.load (i32.add (i32.add (get_local $w) (i32.const 20)) (i32.mul (i32.add (i32.mul (get_local $y) (i32.const 5)) (get_local $x)) (i32.const 4)))))
            (if (get_local $g)
              (then
                (if (i32.ne (i32.load (get_local $g)) (i32.sub (i32.load (get_local $w)) (i32.const 1)))
                  (then
                    (i64.store (global.get $@stack) (i64.const 1239))
                    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                    (i64.store (global.get $@stack) (i64.const 118))
                    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 8)))
                    (call $printf (global.get $@stack) (i32.const 2))
                    (unreachable)))
                (if (i32.ne (i32.load (i32.add (get_local $g) (i32.const 16))) (i32.div_s (i32.load (i32.add (get_local $w) (i32.const 16))) (i32.const 5)))
                  (then
                    (i64.store (global.get $@stack) (i64.const 1295))
                    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                    (i64.store (global.get $@stack) (i64.const 119))
                    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 8)))
                    (call $printf (global.get $@stack) (i32.const 2))
                    (unreachable)))
                (if (i32.ne (i32.load (i32.add (get_local $g) (i32.const 8))) (i32.add (i32.load (i32.add (get_local $w) (i32.const 8))) (i32.mul (i32.load (i32.add (get_local $g) (i32.const 16))) (get_local $x))))
                  (then
                    (i64.store (global.get $@stack) (i64.const 1347))
                    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                    (i64.store (global.get $@stack) (i64.const 120))
                    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 8)))
                    (call $printf (global.get $@stack) (i32.const 2))
                    (unreachable)))
                (if (i32.ne (i32.load (i32.add (get_local $g) (i32.const 12))) (i32.add (i32.load (i32.add (get_local $w) (i32.const 12))) (i32.mul (i32.load (i32.add (get_local $g) (i32.const 16))) (get_local $y))))
                  (then
                    (i64.store (global.get $@stack) (i64.const 1407))
                    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                    (i64.store (global.get $@stack) (i64.const 121))
                    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 8)))
                    (call $printf (global.get $@stack) (i32.const 2))
                    (unreachable)))
                (call $verify (get_local $g))))
            (set_local $x (i32.add (get_local $x) (i32.const 1)))
            (br $@block_1_1_continue)))
        (set_local $y (i32.add (get_local $y) (i32.const 1)))
        (br $@block_1_continue)))
    (global.set $@stack (get_local $@stack_entry)))
  (func $set_cell (param $x i32) (param $y i32) (param $val i32)
    (local $@stack_entry i32)
    (local $w i32)
    (local $t i32)
    (local $xp i32)
    (local $yp i32)
    (local $verbose i32)
    (local $box i32)
    (local $size i32)
    (local $xmin i32)
    (local $ymin i32)
    (local $xmax i32)
    (local $ymax i32)
    (local $new_level i32)
    (local $new_size i32)
    (local $dx i32)
    (local $dy i32)
    (local $new_world i32)
    (local $wsize i32)
    (local $t1 i32)
    (local $t2 i32)
    (local $t3 i32)
    (set_local $@stack_entry (global.get $@stack))
    (if (get_local $verbose)
      (then
        (i64.store (global.get $@stack) (i64.const 1467))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $x)))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $y)))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $val)))
        (global.set $@stack (i32.sub (global.get $@stack) (i32.const 24)))
        (call $printf (global.get $@stack) (i32.const 4))))
    (if (i32.eqz (global.get $world))
      (then
        (if (i32.eqz (get_local $val))
          (then
            (global.set $@stack (get_local $@stack_entry))
            (return)))
        (call $init_memory_manager)
        (set_local $box (call $new_box (i32.const 0) (i32.sub (get_local $x) (i32.const 5)) (i32.sub (get_local $y) (i32.const 5))))
        (i32.store8 (i32.add (i32.add (get_local $box) (i32.const 20)) (i32.add (i32.mul (i32.const 10) (i32.sub (get_local $y) (i32.load (i32.add (get_local $box) (i32.const 12))))) (i32.sub (get_local $x) (i32.load (i32.add (get_local $box) (i32.const 8)))))) (i32.const 1))
        (global.set $world (get_local $box))
        (global.set $@stack (get_local $@stack_entry))
        (return)))
    (set_local $size (i32.load (i32.add (global.get $world) (i32.const 16))))
    (if (i32.eqz (block $@block_1_break (result i32) (drop (br_if $@block_1_break (i32.const 0) (i32.gt_s (i32.load (i32.add (global.get $world) (i32.const 8))) (get_local $x)))) (drop (br_if $@block_1_break (i32.const 0) (i32.ge_s (get_local $x) (i32.add (i32.load (i32.add (global.get $world) (i32.const 8))) (get_local $size))))) (drop (br_if $@block_1_break (i32.const 0) (i32.gt_s (i32.load (i32.add (global.get $world) (i32.const 12))) (get_local $y)))) (drop (br_if $@block_1_break (i32.const 0) (i32.ge_s (get_local $y) (i32.add (i32.load (i32.add (global.get $world) (i32.const 12))) (get_local $size))))) (i32.const 1)))
      (then
        (if (i32.eqz (get_local $val))
          (then
            (global.set $@stack (get_local $@stack_entry))
            (return)))
        (if (get_local $verbose)
          (then
            (i64.store (global.get $@stack) (i64.const 1489))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $x)))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $y)))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store (global.get $@stack) (i64.extend_i32_s (i32.load (i32.add (global.get $world) (i32.const 8)))))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store (global.get $@stack) (i64.extend_i32_s (i32.sub (i32.add (i32.load (i32.add (global.get $world) (i32.const 8))) (get_local $size)) (i32.const 1))))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store (global.get $@stack) (i64.extend_i32_s (i32.load (i32.add (global.get $world) (i32.const 12)))))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store (global.get $@stack) (i64.extend_i32_s (i32.sub (i32.add (i32.load (i32.add (global.get $world) (i32.const 12))) (get_local $size)) (i32.const 1))))
            (global.set $@stack (i32.sub (global.get $@stack) (i32.const 48)))
            (call $printf (global.get $@stack) (i32.const 7))))
        (set_local $xmin (i32.load (i32.add (global.get $world) (i32.const 8))))
        (if (i32.lt_s (get_local $x) (get_local $xmin))
          (then
            (set_local $t (i32.sub (get_local $xmin) (get_local $x)))
            (if (i32.ne (i32.rem_s (get_local $t) (get_local $size)) (i32.const 0))
              (then
                (set_local $t (i32.add (get_local $t) (i32.sub (get_local $size) (i32.rem_s (get_local $t) (get_local $size)))))))
            (set_local $xmin (i32.sub (get_local $xmin) (get_local $t)))))
        (set_local $ymin (i32.load (i32.add (global.get $world) (i32.const 12))))
        (if (i32.lt_s (get_local $y) (get_local $ymin))
          (then
            (set_local $t (i32.sub (get_local $ymin) (get_local $y)))
            (if (i32.ne (i32.rem_s (get_local $t) (get_local $size)) (i32.const 0))
              (then
                (set_local $t (i32.add (get_local $t) (i32.sub (get_local $size) (i32.rem_s (get_local $t) (get_local $size)))))))
            (set_local $ymin (i32.sub (get_local $ymin) (get_local $t)))))
        (set_local $xmax (i32.add (i32.load (i32.add (global.get $world) (i32.const 8))) (get_local $size)))
        (if (i32.gt_s (i32.add (get_local $x) (i32.const 1)) (get_local $xmax))
          (then
            (set_local $t (i32.sub (i32.add (get_local $x) (i32.const 1)) (get_local $xmax)))
            (if (i32.ne (i32.rem_s (get_local $t) (get_local $size)) (i32.const 0))
              (then
                (set_local $t (i32.add (get_local $t) (i32.sub (get_local $size) (i32.rem_s (get_local $t) (get_local $size)))))))
            (set_local $xmax (i32.add (get_local $xmax) (get_local $t)))))
        (set_local $ymax (i32.add (i32.load (i32.add (global.get $world) (i32.const 12))) (get_local $size)))
        (if (i32.gt_s (i32.add (get_local $y) (i32.const 1)) (get_local $ymax))
          (then
            (set_local $t (i32.sub (i32.add (get_local $y) (i32.const 1)) (get_local $ymax)))
            (if (i32.ne (i32.rem_s (get_local $t) (get_local $size)) (i32.const 0))
              (then
                (set_local $t (i32.add (get_local $t) (i32.sub (get_local $size) (i32.rem_s (get_local $t) (get_local $size)))))))
            (set_local $ymax (i32.add (get_local $ymax) (get_local $t)))))
        (if (get_local $verbose)
          (then
            (i64.store (global.get $@stack) (i64.const 1539))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $xmin)))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $xmax)))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $ymin)))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $ymax)))
            (global.set $@stack (i32.sub (global.get $@stack) (i32.const 32)))
            (call $printf (global.get $@stack) (i32.const 5))))
        (set_local $new_level (i32.load (global.get $world)))
        (set_local $new_size (get_local $size))
        (loop $@block_2_continue
          (set_local $new_size (i32.mul (get_local $new_size) (i32.const 5)))
          (set_local $new_level (i32.add (get_local $new_level) (i32.const 1)))
          (br_if $@block_2_continue (if (result i32) (i32.lt_s (get_local $new_size) (i32.sub (get_local $xmax) (get_local $xmin))) (then (i32.const 1)) (else (i32.ne (i32.lt_s (get_local $new_size) (i32.sub (get_local $ymax) (get_local $ymin))) (i32.const 0))))))
        (if (get_local $verbose)
          (then
            (i64.store (global.get $@stack) (i64.const 1583))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store (global.get $@stack) (i64.extend_i32_s (i32.load (global.get $world))))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $new_level)))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $size)))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $new_size)))
            (global.set $@stack (i32.sub (global.get $@stack) (i32.const 32)))
            (call $printf (global.get $@stack) (i32.const 5))))
        (set_local $dx (i32.div_s (i32.add (i32.sub (get_local $new_size) (get_local $xmax)) (get_local $xmin)) (i32.const 2)))
        (if (i32.ne (i32.rem_s (get_local $dx) (get_local $size)) (i32.const 0))
          (then
            (set_local $dx (i32.add (get_local $dx) (i32.sub (get_local $size) (i32.rem_s (get_local $dx) (get_local $size)))))))
        (set_local $dy (i32.div_s (i32.add (i32.sub (get_local $new_size) (get_local $ymax)) (get_local $ymin)) (i32.const 2)))
        (if (i32.ne (i32.rem_s (get_local $dy) (get_local $size)) (i32.const 0))
          (then
            (set_local $dy (i32.add (get_local $dy) (i32.sub (get_local $size) (i32.rem_s (get_local $dy) (get_local $size)))))))
        (set_local $new_world (call $new_box (get_local $new_level) (i32.sub (get_local $xmin) (get_local $dx)) (i32.sub (get_local $ymin) (get_local $dy))))
        (set_local $w (get_local $new_world))
        (set_local $wsize (i32.div_s (get_local $new_size) (i32.const 5)))
        (block $@block_3_break
          (loop $@block_3_continue
            (set_local $xp (i32.div_s (i32.sub (i32.load (i32.add (global.get $world) (i32.const 8))) (i32.load (i32.add (get_local $w) (i32.const 8)))) (get_local $wsize)))
            (set_local $yp (i32.div_s (i32.sub (i32.load (i32.add (global.get $world) (i32.const 12))) (i32.load (i32.add (get_local $w) (i32.const 12)))) (get_local $wsize)))
            (if (i32.eq (get_local $wsize) (i32.load (i32.add (global.get $world) (i32.const 16))))
              (then
                (if (get_local $verbose)
                  (then
                    (i64.store (global.get $@stack) (i64.const 1616))
                    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                    (i64.store (global.get $@stack) (i64.extend_i32_s (i32.add (i32.load (i32.add (get_local $w) (i32.const 8))) (i32.mul (get_local $xp) (get_local $wsize)))))
                    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                    (i64.store (global.get $@stack) (i64.extend_i32_s (i32.add (i32.load (i32.add (get_local $w) (i32.const 12))) (i32.mul (get_local $yp) (get_local $wsize)))))
                    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                    (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $wsize)))
                    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 24)))
                    (call $printf (global.get $@stack) (i32.const 4))))
                (if (i32.ne (i32.add (i32.load (i32.add (get_local $w) (i32.const 8))) (i32.mul (get_local $xp) (get_local $wsize))) (i32.load (i32.add (global.get $world) (i32.const 8))))
                  (then
                    (i64.store (global.get $@stack) (i64.const 1662))
                    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                    (i64.store (global.get $@stack) (i64.const 208))
                    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 8)))
                    (call $printf (global.get $@stack) (i32.const 2))
                    (unreachable)))
                (if (i32.ne (i32.add (i32.load (i32.add (get_local $w) (i32.const 12))) (i32.mul (get_local $yp) (get_local $wsize))) (i32.load (i32.add (global.get $world) (i32.const 12))))
                  (then
                    (i64.store (global.get $@stack) (i64.const 1723))
                    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                    (i64.store (global.get $@stack) (i64.const 209))
                    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 8)))
                    (call $printf (global.get $@stack) (i32.const 2))
                    (unreachable)))
                (i32.store (i32.add (i32.add (get_local $w) (i32.const 20)) (i32.mul (i32.add (i32.mul (i32.const 5) (get_local $yp)) (get_local $xp)) (i32.const 4))) (global.get $world))
                (br $@block_3_break)))
            (set_local $new_level (i32.sub (get_local $new_level) (i32.const 1)))
            (if (get_local $verbose)
              (then
                (i64.store (global.get $@stack) (i64.const 1784))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store (global.get $@stack) (i64.extend_i32_s (i32.load (i32.add (get_local $w) (i32.const 8)))))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $xp)))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $wsize)))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store (global.get $@stack) (i64.extend_i32_s (i32.load (i32.add (get_local $w) (i32.const 12)))))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $yp)))
                (global.set $@stack (i32.sub (global.get $@stack) (i32.const 40)))
                (call $printf (global.get $@stack) (i32.const 6))))
            (i32.store (i32.add (i32.add (get_local $w) (i32.const 20)) (i32.mul (i32.add (i32.mul (i32.const 5) (get_local $yp)) (get_local $xp)) (i32.const 4))) (call $new_box (get_local $new_level) (i32.add (i32.load (i32.add (get_local $w) (i32.const 8))) (i32.mul (get_local $xp) (get_local $wsize))) (i32.add (i32.load (i32.add (get_local $w) (i32.const 12))) (i32.mul (get_local $yp) (get_local $wsize)))))
            (set_local $w (i32.load (i32.add (i32.add (get_local $w) (i32.const 20)) (i32.mul (i32.add (i32.mul (i32.const 5) (get_local $yp)) (get_local $xp)) (i32.const 4)))))
            (set_local $wsize (i32.div_s (get_local $wsize) (i32.const 5)))
            (br $@block_3_continue)))
        (global.set $world (get_local $new_world))))
    (set_local $w (global.get $world))
    (block $@block_4_break
      (loop $@block_4_continue
        (if (get_local $verbose)
          (then
            (i64.store (global.get $@stack) (i64.const 1838))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $x)))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $y)))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store (global.get $@stack) (i64.extend_i32_s (i32.load (get_local $w))))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store (global.get $@stack) (i64.extend_i32_s (i32.load (i32.add (get_local $w) (i32.const 8)))))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store (global.get $@stack) (i64.extend_i32_s (i32.load (i32.add (get_local $w) (i32.const 12)))))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store (global.get $@stack) (i64.extend_i32_s (i32.load (i32.add (get_local $w) (i32.const 16)))))
            (global.set $@stack (i32.sub (global.get $@stack) (i32.const 48)))
            (call $printf (global.get $@stack) (i32.const 7))))
        (if (i32.eqz (block $@block_4_1_break (result i32) (drop (br_if $@block_4_1_break (i32.const 0) (i32.gt_s (i32.load (i32.add (get_local $w) (i32.const 8))) (get_local $x)))) (drop (br_if $@block_4_1_break (i32.const 0) (i32.ge_s (get_local $x) (i32.add (i32.load (i32.add (get_local $w) (i32.const 8))) (i32.load (i32.add (get_local $w) (i32.const 16))))))) (drop (br_if $@block_4_1_break (i32.const 0) (i32.gt_s (i32.load (i32.add (get_local $w) (i32.const 12))) (get_local $y)))) (drop (br_if $@block_4_1_break (i32.const 0) (i32.ge_s (get_local $y) (i32.add (i32.load (i32.add (get_local $w) (i32.const 12))) (i32.load (i32.add (get_local $w) (i32.const 16))))))) (i32.const 1)))
          (then
            (i64.store (global.get $@stack) (i64.const 1875))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store (global.get $@stack) (i64.const 229))
            (global.set $@stack (i32.sub (global.get $@stack) (i32.const 8)))
            (call $printf (global.get $@stack) (i32.const 2))
            (unreachable)))
        (if (i32.eqz (i32.load (get_local $w)))
          (then
            (set_local $xp (i32.sub (get_local $x) (i32.load (i32.add (get_local $w) (i32.const 8)))))
            (set_local $yp (i32.sub (get_local $y) (i32.load (i32.add (get_local $w) (i32.const 12)))))
            (if (get_local $verbose)
              (then
                (i64.store (global.get $@stack) (i64.const 1977))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store (global.get $@stack) (i64.extend_i32_s (i32.load (get_local $w))))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store (global.get $@stack) (i64.extend_i32_s (i32.load (i32.add (get_local $w) (i32.const 8)))))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store (global.get $@stack) (i64.extend_i32_s (i32.load (i32.add (get_local $w) (i32.const 12)))))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store (global.get $@stack) (i64.extend_i32_s (i32.add (i32.mul (get_local $yp) (i32.const 10)) (get_local $xp))))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $val)))
                (global.set $@stack (i32.sub (global.get $@stack) (i32.const 40)))
                (call $printf (global.get $@stack) (i32.const 6))))
            (i32.store8 (i32.add (i32.add (get_local $w) (i32.const 20)) (i32.add (i32.mul (get_local $yp) (i32.const 10)) (get_local $xp))) (get_local $val))
            (br $@block_4_break))
          (else
            (if (i32.eqz (get_local $val))
              (then
                (global.set $@stack (get_local $@stack_entry))
                (return)))
            (set_local $size (i32.div_s (i32.load (i32.add (get_local $w) (i32.const 16))) (i32.const 5)))
            (set_local $xp (i32.div_s (i32.sub (get_local $x) (i32.load (i32.add (get_local $w) (i32.const 8)))) (get_local $size)))
            (set_local $yp (i32.div_s (i32.sub (get_local $y) (i32.load (i32.add (get_local $w) (i32.const 12)))) (get_local $size)))
            (if (get_local $verbose)
              (then
                (i64.store (global.get $@stack) (i64.const 2007))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store (global.get $@stack) (i64.extend_i32_s (i32.sub (i32.load (get_local $w)) (i32.const 1))))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $xp)))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store (global.get $@stack) (i64.extend_i32_s (get_local $yp)))
                (global.set $@stack (i32.sub (global.get $@stack) (i32.const 24)))
                (call $printf (global.get $@stack) (i32.const 4))))
            (if (i32.eqz (i32.load (i32.add (i32.add (get_local $w) (i32.const 20)) (i32.mul (i32.add (i32.mul (get_local $yp) (i32.const 5)) (get_local $xp)) (i32.const 4)))))
              (then
                (i32.store (i32.add (i32.add (get_local $w) (i32.const 20)) (i32.mul (i32.add (i32.mul (get_local $yp) (i32.const 5)) (get_local $xp)) (i32.const 4))) (call $new_box (i32.sub (i32.load (get_local $w)) (i32.const 1)) (i32.add (i32.load (i32.add (get_local $w) (i32.const 8))) (i32.mul (get_local $xp) (get_local $size))) (i32.add (i32.load (i32.add (get_local $w) (i32.const 12))) (i32.mul (get_local $yp) (get_local $size)))))))
            (set_local $t1 (i32.sub (i32.load (get_local $w)) (i32.const 1)))
            (set_local $t2 (i32.add (i32.load (i32.add (get_local $w) (i32.const 8))) (i32.mul (get_local $xp) (get_local $size))))
            (set_local $t3 (i32.add (i32.load (i32.add (get_local $w) (i32.const 12))) (i32.mul (get_local $yp) (get_local $size))))
            (set_local $w (i32.load (i32.add (i32.add (get_local $w) (i32.const 20)) (i32.mul (i32.add (i32.mul (get_local $yp) (i32.const 5)) (get_local $xp)) (i32.const 4)))))
            (if (i32.ne (get_local $t1) (i32.load (get_local $w)))
              (then
                (i64.store (global.get $@stack) (i64.const 2049))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store (global.get $@stack) (i64.const 251))
                (global.set $@stack (i32.sub (global.get $@stack) (i32.const 8)))
                (call $printf (global.get $@stack) (i32.const 2))
                (unreachable)))
            (if (i32.ne (get_local $t2) (i32.load (i32.add (get_local $w) (i32.const 8))))
              (then
                (i64.store (global.get $@stack) (i64.const 2095))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store (global.get $@stack) (i64.const 252))
                (global.set $@stack (i32.sub (global.get $@stack) (i32.const 8)))
                (call $printf (global.get $@stack) (i32.const 2))
                (unreachable)))
            (if (i32.ne (get_local $t3) (i32.load (i32.add (get_local $w) (i32.const 12))))
              (then
                (i64.store (global.get $@stack) (i64.const 2138))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store (global.get $@stack) (i64.const 253))
                (global.set $@stack (i32.sub (global.get $@stack) (i32.const 8)))
                (call $printf (global.get $@stack) (i32.const 2))
                (unreachable)))
            (if (i32.ne (get_local $size) (i32.load (i32.add (get_local $w) (i32.const 16))))
              (then
                (i64.store (global.get $@stack) (i64.const 2181))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store (global.get $@stack) (i64.const 254))
                (global.set $@stack (i32.sub (global.get $@stack) (i32.const 8)))
                (call $printf (global.get $@stack) (i32.const 2))
                (unreachable)))))
        (br $@block_4_continue)))
    (if (get_local $verbose)
      (then
        (i64.store (global.get $@stack) (i64.const 2228))
        (global.set $@stack (i32.sub (global.get $@stack) (i32.const 0)))
        (call $printf (global.get $@stack) (i32.const 1))))
    (global.set $@stack (get_local $@stack_entry)))
  (func $dump_cells0 (param $w i32) (param $verbose i32)
    (local $@stack_entry i32)
    (local $y i32)
    (local $x i32)
    (set_local $@stack_entry (global.get $@stack))
    (if (get_local $verbose)
      (then
        (i64.store (global.get $@stack) (i64.const 2235))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (i32.load (get_local $w))))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (i32.load (i32.add (get_local $w) (i32.const 8)))))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (i32.load (i32.add (get_local $w) (i32.const 12)))))
        (global.set $@stack (i32.sub (global.get $@stack) (i32.const 24)))
        (call $printf (global.get $@stack) (i32.const 4))))
    (block $@block_1_break
      (loop $@block_1_continue
        (br_if $@block_1_break (i32.ge_s (get_local $y) (i32.const 10)))
        (block $@block_1_1_break
          (set_local $x (i32.const 0))
          (loop $@block_1_1_continue
            (br_if $@block_1_1_break (i32.ge_s (get_local $x) (i32.const 10)))
            (if (i32.load8_s (i32.add (i32.add (get_local $w) (i32.const 20)) (i32.add (i32.mul (get_local $y) (i32.const 10)) (get_local $x))))
              (then
                (i64.store (global.get $@stack) (i64.const 2247))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store (global.get $@stack) (i64.extend_i32_s (i32.add (i32.load (i32.add (get_local $w) (i32.const 8))) (get_local $x))))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store (global.get $@stack) (i64.extend_i32_s (i32.add (i32.load (i32.add (get_local $w) (i32.const 12))) (get_local $y))))
                (global.set $@stack (i32.sub (global.get $@stack) (i32.const 16)))
                (call $printf (global.get $@stack) (i32.const 3))))
            (set_local $x (i32.add (get_local $x) (i32.const 1)))
            (br $@block_1_1_continue)))
        (set_local $y (i32.add (get_local $y) (i32.const 1)))
        (br $@block_1_continue)))
    (if (get_local $verbose)
      (then
        (i64.store (global.get $@stack) (i64.const 2256))
        (global.set $@stack (i32.sub (global.get $@stack) (i32.const 0)))
        (call $printf (global.get $@stack) (i32.const 1))))
    (global.set $@stack (get_local $@stack_entry)))
  (func $dump_cells (param $w i32) (param $verbose i32)
    (local $@stack_entry i32)
    (local $y i32)
    (local $x i32)
    (set_local $@stack_entry (global.get $@stack))
    (if (get_local $verbose)
      (then
        (i64.store (global.get $@stack) (i64.const 2235))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (i32.load (get_local $w))))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (i32.load (i32.add (get_local $w) (i32.const 8)))))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (i32.load (i32.add (get_local $w) (i32.const 12)))))
        (global.set $@stack (i32.sub (global.get $@stack) (i32.const 24)))
        (call $printf (global.get $@stack) (i32.const 4))))
    (block $@block_1_break
      (loop $@block_1_continue
        (br_if $@block_1_break (i32.ge_s (get_local $y) (i32.const 5)))
        (block $@block_1_1_break
          (set_local $x (i32.const 0))
          (loop $@block_1_1_continue
            (br_if $@block_1_1_break (i32.ge_s (get_local $x) (i32.const 5)))
            (if (i32.load (i32.add (i32.add (get_local $w) (i32.const 20)) (i32.mul (i32.add (i32.mul (get_local $y) (i32.const 5)) (get_local $x)) (i32.const 4))))
              (then
                (if (i32.eq (i32.load (get_local $w)) (i32.const 1))
                  (then
                    (call $dump_cells0 (i32.load (i32.add (i32.add (get_local $w) (i32.const 20)) (i32.mul (i32.add (i32.mul (get_local $y) (i32.const 5)) (get_local $x)) (i32.const 4)))) (get_local $verbose)))
                  (else
                    (call $dump_cells (i32.load (i32.add (i32.add (get_local $w) (i32.const 20)) (i32.mul (i32.add (i32.mul (get_local $y) (i32.const 5)) (get_local $x)) (i32.const 4)))) (get_local $verbose)))))
              (else
                (if (get_local $verbose)
                  (then
                    (i64.store (global.get $@stack) (i64.const 2258))
                    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 0)))
                    (call $printf (global.get $@stack) (i32.const 1))))))
            (set_local $x (i32.add (get_local $x) (i32.const 1)))
            (br $@block_1_1_continue)))
        (set_local $y (i32.add (get_local $y) (i32.const 1)))
        (br $@block_1_continue)))
    (if (get_local $verbose)
      (then
        (i64.store (global.get $@stack) (i64.const 2256))
        (global.set $@stack (i32.sub (global.get $@stack) (i32.const 0)))
        (call $printf (global.get $@stack) (i32.const 1))))
    (global.set $@stack (get_local $@stack_entry)))
  (func $dump_all (param $verbose i32)
    (local $@stack_entry i32)
    (set_local $@stack_entry (global.get $@stack))
    (if (i32.eqz (i32.load (global.get $world)))
      (then
        (call $dump_cells0 (global.get $world) (get_local $verbose)))
      (else
        (call $dump_cells (global.get $world) (get_local $verbose))))
    (i64.store (global.get $@stack) (i64.const 2260))
    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 0)))
    (call $printf (global.get $@stack) (i32.const 1))
    (global.set $@stack (get_local $@stack_entry)))
  (func $to_arr0 (param $w i32) (param $n i32) (param $pts i32) (param $k i32)
    (local $@stack_entry i32)
    (local $y i32)
    (local $x i32)
    (set_local $@stack_entry (global.get $@stack))
    (block $@block_1_break
      (loop $@block_1_continue
        (br_if $@block_1_break (i32.ge_s (get_local $y) (i32.const 10)))
        (block $@block_1_1_break
          (set_local $x (i32.const 0))
          (loop $@block_1_1_continue
            (br_if $@block_1_1_break (i32.ge_s (get_local $x) (i32.const 10)))
            (if (i32.load8_s (i32.add (i32.add (get_local $w) (i32.const 20)) (i32.add (i32.mul (get_local $y) (i32.const 10)) (get_local $x))))
              (then
                (if (i32.ge_s (i32.load (get_local $k)) (get_local $n))
                  (then
                    (i64.store (global.get $@stack) (i64.const 2262))
                    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                    (i64.store (global.get $@stack) (i64.const 307))
                    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 8)))
                    (call $printf (global.get $@stack) (i32.const 2))
                    (unreachable)))
                (i32.store (i32.add (get_local $pts) (i32.mul (i32.mul (i32.load (get_local $k)) (i32.const 2)) (i32.const 4))) (i32.add (i32.load (i32.add (get_local $w) (i32.const 8))) (get_local $x)))
                (i32.store (i32.add (get_local $pts) (i32.mul (i32.add (i32.mul (i32.load (get_local $k)) (i32.const 2)) (i32.const 1)) (i32.const 4))) (i32.add (i32.load (i32.add (get_local $w) (i32.const 12))) (get_local $y)))
                (i32.store (get_local $k) (i32.add (i32.load (get_local $k)) (i32.const 1)))))
            (set_local $x (i32.add (get_local $x) (i32.const 1)))
            (br $@block_1_1_continue)))
        (set_local $y (i32.add (get_local $y) (i32.const 1)))
        (br $@block_1_continue)))
    (global.set $@stack (get_local $@stack_entry)))
  (func $to_arr1 (param $w i32) (param $n i32) (param $pts i32) (param $k i32)
    (local $y i32)
    (local $x i32)
    (block $@block_1_break
      (loop $@block_1_continue
        (br_if $@block_1_break (i32.ge_s (get_local $y) (i32.const 5)))
        (block $@block_1_1_break
          (set_local $x (i32.const 0))
          (loop $@block_1_1_continue
            (br_if $@block_1_1_break (i32.ge_s (get_local $x) (i32.const 5)))
            (if (i32.load (i32.add (i32.add (get_local $w) (i32.const 20)) (i32.mul (i32.add (i32.mul (get_local $y) (i32.const 5)) (get_local $x)) (i32.const 4))))
              (then
                (if (i32.eq (i32.load (get_local $w)) (i32.const 1))
                  (then
                    (call $to_arr0 (i32.load (i32.add (i32.add (get_local $w) (i32.const 20)) (i32.mul (i32.add (i32.mul (get_local $y) (i32.const 5)) (get_local $x)) (i32.const 4)))) (get_local $n) (get_local $pts) (get_local $k)))
                  (else
                    (call $to_arr1 (i32.load (i32.add (i32.add (get_local $w) (i32.const 20)) (i32.mul (i32.add (i32.mul (get_local $y) (i32.const 5)) (get_local $x)) (i32.const 4)))) (get_local $n) (get_local $pts) (get_local $k))))))
            (set_local $x (i32.add (get_local $x) (i32.const 1)))
            (br $@block_1_1_continue)))
        (set_local $y (i32.add (get_local $y) (i32.const 1)))
        (br $@block_1_continue))))
  (func $to_arr (param $n i32) (param $pts i32)
    (local $k i32)
    (set_local $k (global.get $@stack))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 4)))
    (i32.store (get_local $k) (i32.const 0))
    (if (i32.eqz (i32.load (global.get $world)))
      (then
        (call $to_arr0 (global.get $world) (get_local $n) (get_local $pts) (get_local $k)))
      (else
        (call $to_arr1 (global.get $world) (get_local $n) (get_local $pts) (get_local $k)))))
  (func $mulberry32 (result f64)
    (local $t i32)
    (global.set $seed (i32.add (global.get $seed) (i32.const 1831565813)))
    (set_local $t (global.get $seed))
    (set_local $t (i32.mul (i32.xor (get_local $t) (i32.shr_u (get_local $t) (i32.const 15))) (i32.or (get_local $t) (i32.const 1))))
    (set_local $t (i32.xor (get_local $t) (i32.add (get_local $t) (i32.mul (i32.xor (get_local $t) (i32.shr_u (get_local $t) (i32.const 7))) (i32.or (get_local $t) (i32.const 61))))))
    (f64.div (f64.convert_i32_u (i32.xor (get_local $t) (i32.shr_u (get_local $t) (i32.const 14)))) (f64.const 4.294967296E9)))
  (func $rand_int (result i32)
    (i32.trunc_f64_s (f64.mul (f64.const 10000.0) (f64.sub (call $mulberry32) (f64.const 0.5)))))
  (func $sort_points (param $n i32) (param $pts i32)
    (local $cnt i32)
    (local $i i32)
    (local $t i32)
    (loop $@block_1_continue
      (block $@block_1_1_break
        (set_local $i (i32.const 0))
        (set_local $cnt (i32.const 0))
        (loop $@block_1_1_continue
          (br_if $@block_1_1_break (i32.ge_s (get_local $i) (i32.sub (get_local $n) (i32.const 1))))
          (if (if (result i32) (i32.lt_s (i32.load (i32.add (get_local $pts) (i32.mul (i32.mul (i32.const 2) (get_local $i)) (i32.const 4)))) (i32.load (i32.add (get_local $pts) (i32.mul (i32.add (i32.mul (i32.const 2) (get_local $i)) (i32.const 2)) (i32.const 4))))) (then (i32.const 1)) (else (i32.ne (if (result i32) (i32.ne (i32.load (i32.add (get_local $pts) (i32.mul (i32.mul (i32.const 2) (get_local $i)) (i32.const 4)))) (i32.load (i32.add (get_local $pts) (i32.mul (i32.add (i32.mul (i32.const 2) (get_local $i)) (i32.const 2)) (i32.const 4))))) (then (i32.const 0)) (else (i32.ne (i32.lt_s (i32.load (i32.add (get_local $pts) (i32.mul (i32.add (i32.mul (i32.const 2) (get_local $i)) (i32.const 1)) (i32.const 4)))) (i32.load (i32.add (get_local $pts) (i32.mul (i32.add (i32.mul (i32.const 2) (get_local $i)) (i32.const 3)) (i32.const 4))))) (i32.const 0)))) (i32.const 0))))
            (then
              (set_local $i (i32.add (get_local $i) (i32.const 1)))
              (br $@block_1_1_continue)))
          (set_local $t (i32.load (i32.add (get_local $pts) (i32.mul (i32.mul (i32.const 2) (get_local $i)) (i32.const 4)))))
          (i32.store (i32.add (get_local $pts) (i32.mul (i32.mul (i32.const 2) (get_local $i)) (i32.const 4))) (i32.load (i32.add (get_local $pts) (i32.mul (i32.add (i32.mul (i32.const 2) (get_local $i)) (i32.const 2)) (i32.const 4)))))
          (i32.store (i32.add (get_local $pts) (i32.mul (i32.add (i32.mul (i32.const 2) (get_local $i)) (i32.const 2)) (i32.const 4))) (get_local $t))
          (set_local $t (i32.load (i32.add (get_local $pts) (i32.mul (i32.add (i32.mul (i32.const 2) (get_local $i)) (i32.const 1)) (i32.const 4)))))
          (i32.store (i32.add (get_local $pts) (i32.mul (i32.add (i32.mul (i32.const 2) (get_local $i)) (i32.const 1)) (i32.const 4))) (i32.load (i32.add (get_local $pts) (i32.mul (i32.add (i32.mul (i32.const 2) (get_local $i)) (i32.const 3)) (i32.const 4)))))
          (i32.store (i32.add (get_local $pts) (i32.mul (i32.add (i32.mul (i32.const 2) (get_local $i)) (i32.const 3)) (i32.const 4))) (get_local $t))
          (set_local $cnt (i32.add (get_local $cnt) (i32.const 1)))
          (set_local $i (i32.add (get_local $i) (i32.const 1)))
          (br $@block_1_1_continue)))
      (br_if $@block_1_continue (i32.gt_s (get_local $cnt) (i32.const 0)))))
  (func $main (export "main") (result i32)
    (local $@stack_entry i32)
    (local $i i32)
    (local $n_pts i32)
    (local $pts i32)
    (set_local $@stack_entry (global.get $@stack))
    (set_local $n_pts (i32.const 20))
    (set_local $pts (global.get $@stack))
    (global.set $@stack (i32.add (global.get $@stack) (i32.mul (i32.mul (i32.const 2) (get_local $n_pts)) (i32.const 4))))
    (block $@block_1_break
      (set_local $i (i32.const 0))
      (loop $@block_1_continue
        (br_if $@block_1_break (i32.ge_s (get_local $i) (i32.mul (i32.const 2) (get_local $n_pts))))
        (i32.store (i32.add (get_local $pts) (i32.mul (get_local $i) (i32.const 4))) (call $rand_int))
        (set_local $i (i32.add (get_local $i) (i32.const 1)))
        (br $@block_1_continue)))
    (block $@block_2_break
      (set_local $i (i32.const 0))
      (loop $@block_2_continue
        (br_if $@block_2_break (i32.ge_s (get_local $i) (get_local $n_pts)))
        (call $set_cell (i32.load (i32.add (get_local $pts) (i32.mul (i32.mul (i32.const 2) (get_local $i)) (i32.const 4)))) (i32.load (i32.add (get_local $pts) (i32.mul (i32.add (i32.mul (i32.const 2) (get_local $i)) (i32.const 1)) (i32.const 4)))) (i32.const 1))
        (set_local $i (i32.add (get_local $i) (i32.const 1)))
        (br $@block_2_continue)))
    (call $verify (global.get $world))
    (i64.store (global.get $@stack) (i64.const 2300))
    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 0)))
    (call $printf (global.get $@stack) (i32.const 1))
    (block $@block_3_break
      (set_local $i (i32.const 0))
      (loop $@block_3_continue
        (br_if $@block_3_break (i32.ge_s (get_local $i) (get_local $n_pts)))
        (i64.store (global.get $@stack) (i64.const 2247))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (i32.load (i32.add (get_local $pts) (i32.mul (i32.mul (i32.const 2) (get_local $i)) (i32.const 4))))))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (i32.load (i32.add (get_local $pts) (i32.mul (i32.add (i32.mul (i32.const 2) (get_local $i)) (i32.const 1)) (i32.const 4))))))
        (global.set $@stack (i32.sub (global.get $@stack) (i32.const 16)))
        (call $printf (global.get $@stack) (i32.const 3))
        (set_local $i (i32.add (get_local $i) (i32.const 1)))
        (br $@block_3_continue)))
    (call $sort_points (get_local $n_pts) (get_local $pts))
    (i64.store (global.get $@stack) (i64.const 2312))
    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 0)))
    (call $printf (global.get $@stack) (i32.const 1))
    (block $@block_4_break
      (set_local $i (i32.const 0))
      (loop $@block_4_continue
        (br_if $@block_4_break (i32.ge_s (get_local $i) (get_local $n_pts)))
        (i64.store (global.get $@stack) (i64.const 2247))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (i32.load (i32.add (get_local $pts) (i32.mul (i32.mul (i32.const 2) (get_local $i)) (i32.const 4))))))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (i32.load (i32.add (get_local $pts) (i32.mul (i32.add (i32.mul (i32.const 2) (get_local $i)) (i32.const 1)) (i32.const 4))))))
        (global.set $@stack (i32.sub (global.get $@stack) (i32.const 16)))
        (call $printf (global.get $@stack) (i32.const 3))
        (set_local $i (i32.add (get_local $i) (i32.const 1)))
        (br $@block_4_continue)))
    (call $to_arr (get_local $n_pts) (get_local $pts))
    (call $sort_points (get_local $n_pts) (get_local $pts))
    (i64.store (global.get $@stack) (i64.const 2325))
    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 0)))
    (call $printf (global.get $@stack) (i32.const 1))
    (block $@block_5_break
      (set_local $i (i32.const 0))
      (loop $@block_5_continue
        (br_if $@block_5_break (i32.ge_s (get_local $i) (get_local $n_pts)))
        (i64.store (global.get $@stack) (i64.const 2247))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (i32.load (i32.add (get_local $pts) (i32.mul (i32.mul (i32.const 2) (get_local $i)) (i32.const 4))))))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store (global.get $@stack) (i64.extend_i32_s (i32.load (i32.add (get_local $pts) (i32.mul (i32.add (i32.mul (i32.const 2) (get_local $i)) (i32.const 1)) (i32.const 4))))))
        (global.set $@stack (i32.sub (global.get $@stack) (i32.const 16)))
        (call $printf (global.get $@stack) (i32.const 3))
        (set_local $i (i32.add (get_local $i) (i32.const 1)))
        (br $@block_5_continue)))
    (i64.store (global.get $@stack) (i64.const 2338))
    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 0)))
    (call $printf (global.get $@stack) (i32.const 1))
    (call $dump_all (i32.const 0))
    (global.set $@stack (get_local $@stack_entry))
    (i32.const 0)))
