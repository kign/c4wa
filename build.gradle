plugins {
    id 'java'
    id 'application'
    id 'antlr'
}

group 'net.inet_lab'
version appVersion

repositories {
    mavenCentral()
}

application {
    // ./gradlew installDist will create script
    // -> build/install/c4wa-compile/bin/c4wa-compile <-
    // (appName is defined in gradle.properties, which is also included in Java resources)
    applicationName = appName
}

/* some hacks we don't need, preserving here for reference */
/* This is how we could redirect to create JAR in /lib, not /libs
tasks.withType(Jar) {
    libsDirName = "${project.buildDir}/lib" as File
}
*/

/* This is how we can copy all dependencies to /lib (basically content of distribution files)
task copyToLib(type: Copy) {
    into "${project.buildDir}/lib" from configurations.runtimeClasspath
}

build.dependsOn(copyToLib)
*/

dependencies {
    antlr 'org.antlr:antlr4:4.9.3'
    compileOnly 'org.jetbrains:annotations:23.0.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

generateGrammarSource {
    // Approach borrowed from:
    // https://stackoverflow.com/questions/50568405/antlr4-generate-grammar-source-for-more-language-in-gradle
    def target = project.hasProperty('target') ? project.property('target') : 'Java'

    switch(target) {
        case "Java" :
            // must match @header param in grammar definition file
            outputDirectory = "${project.buildDir}/generated-src/antlr/main/net/inet_lab/c4wa/autogen/cparser" as File
            break
        case "JavaScript" :
            // https://github.com/antlr/antlr4/blob/master/doc/javascript-target.md
            // To generate JS parser:
            // ./gradlew generateGrammarSource -Ptarget=JavaScript
            // To run, will need antlr4 runtime: https://www.npmjs.com/package/antlr4
            outputDirectory = "${project.buildDir}/generated-js" as File
            arguments = ['-Dlanguage=' + target]
            break
    }

    arguments += ['-visitor', '-long-messages']
}

application {
    mainClass = 'net.inet_lab.c4wa.app.Main'
}

test {
    useJUnitPlatform()
}